[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "comfyui-universal-detailer"
version = "2.0.0"
description = "ComfyUI custom node for face, hand, and finger detection and enhancement"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Claude AI", email = "claude@anthropic.com"},
]
maintainers = [
    {name = "Claude AI", email = "claude@anthropic.com"},
]
keywords = [
    "comfyui",
    "stable-diffusion", 
    "face-detection",
    "hand-detection",
    "image-enhancement",
    "inpainting",
    "yolo",
    "ai",
    "machine-learning"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
]
requires-python = ">=3.8"
dependencies = [
    "ultralytics>=8.0.0",
    "opencv-python>=4.5.0",
    "torch>=1.12.0", 
    "torchvision>=0.13.0",
    "numpy>=1.21.0",
    "Pillow>=8.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.0.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.910"
]
performance = [
    "psutil>=5.8.0",
    "GPUtil>=1.4.0"
]
all = [
    "pytest>=6.0.0",
    "pytest-cov>=2.0.0", 
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.910",
    "psutil>=5.8.0",
    "GPUtil>=1.4.0"
]

[project.urls]
Homepage = "https://github.com/KyouichiAmagase/ComfyUI-UniversalDetailer"
Documentation = "https://github.com/KyouichiAmagase/ComfyUI-UniversalDetailer/blob/main/README.md"
Repository = "https://github.com/KyouichiAmagase/ComfyUI-UniversalDetailer"
"Bug Tracker" = "https://github.com/KyouichiAmagase/ComfyUI-UniversalDetailer/issues"
Changelog = "https://github.com/KyouichiAmagase/ComfyUI-UniversalDetailer/blob/main/CODE_REVIEW_FIXES_REPORT.md"

[project.scripts]
universal-detailer-test = "tests.run_tests:main"
universal-detailer-benchmark = "utils.performance_utils:run_performance_benchmark"

[tool.setuptools]
packages = ["detection", "masking", "utils", "tests"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.json", "*.yaml", "*.yml"]
workflow_examples = ["*.json", "*.md"]
tests = ["*.py"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ultralytics.*",
    "cv2.*",
    "PIL.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["detection", "masking", "utils"]
omit = [
    "tests/*",
    "workflow_examples/*",
    "setup.py",
]

[tool.coverage.report] 
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]